"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sprightlyAsync = exports.sprightly = exports.SprightlyError = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const get_value_1 = __importDefault(require("get-value"));
class SprightlyError extends Error {
    constructor(message) {
        super(message);
    }
}
exports.SprightlyError = SprightlyError;
function parse(fileContent, filePath, data, options) {
    const parsedFile = fileContent.replaceAll(/\{\{(>?)(.*?)\}\}/g, (_, isComponent, reference) => {
        reference = reference.trim();
        if (isComponent) {
            const componentAbsolutePath = path_1.default.join(path_1.default.dirname(filePath), path_1.default.normalize(reference));
            if (!fs_1.default.existsSync(componentAbsolutePath)) {
                throw new SprightlyError(`Component "${reference}" was not found at "${filePath}"`);
            }
            return sprightly(componentAbsolutePath, data, options);
        }
        const value = (0, get_value_1.default)(data, reference, options.throwOnKeyNotfound ? undefined : options.keyFallback);
        if (value === undefined && options.throwOnKeyNotfound) {
            throw new SprightlyError(`Key "${reference}" was not found at "${filePath}"`);
        }
        return value;
    });
    return parsedFile;
}
const cache = new Map();
const defaultOptions = {
    keyFallback: "",
    throwOnKeyNotfound: false,
    cache: false,
};
function sprightly(entryPoint, data, options = defaultOptions) {
    if (typeof entryPoint !== "string") {
        throw new SprightlyError("Entry point must be a string");
    }
    if (data.constructor !== Object) {
        throw new SprightlyError("Data must be an object");
    }
    if (options.constructor !== Object) {
        throw new SprightlyError("Options must be an object or undefined");
    }
    options = Object.assign(Object.assign({}, defaultOptions), options);
    if (!path_1.default.isAbsolute(entryPoint)) {
        entryPoint = path_1.default.resolve(path_1.default.normalize(entryPoint));
    }
    if (!fs_1.default.existsSync(entryPoint)) {
        throw new SprightlyError(`Entry point "${entryPoint}" does not exist`);
    }
    if (options.cache && cache.has(entryPoint)) {
        return cache.get(entryPoint);
    }
    const file = fs_1.default.readFileSync(entryPoint).toString();
    const parsedFile = parse(file, entryPoint, data, options);
    if (options.cache && !cache.has(entryPoint)) {
        cache.set(entryPoint, parsedFile);
    }
    return parsedFile;
}
exports.sprightly = sprightly;
function sprightlyAsync(entryPoint, data, options = defaultOptions) {
    return new Promise((resolve, reject) => {
        try {
            resolve(sprightly(entryPoint, data, options));
        }
        catch (error) {
            reject(error);
        }
    });
}
exports.sprightlyAsync = sprightlyAsync;
